{"version":3,"sources":["../../../src/@ionic-native/plugins/themeable-browser/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, CordovaInstance, InstanceCheck, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\ndeclare var cordova: any;\n\nexport interface ThemeableBrowserButton {\n  wwwImage?: string;\n  image?: string;\n  wwwImagePressed?: string;\n  imagePressed?: string;\n  wwwImageDensity?: number;\n  align?: string;\n  event?: string;\n}\n\nexport interface ThemeableBrowserOptions {\n  statusbar?: {\n    color: string;\n  };\n  toolbar?: {\n    height?: number;\n    color?: string;\n    image?: string;\n  };\n  title?: {\n    color?: string;\n    staticText?: string;\n    showPageTitle?: boolean;\n  };\n  backButton?: ThemeableBrowserButton;\n  forwardButton?: ThemeableBrowserButton;\n  closeButton?: ThemeableBrowserButton;\n  customButtons?: ThemeableBrowserButton[];\n  menu?: {\n    image?: string;\n    imagePressed?: string;\n    title?: string;\n    cancel?: string;\n    align?: string;\n    items?: {\n      event: string;\n      label: string;\n    }[];\n  };\n  backButtonCanClose?: boolean;\n  disableAnimation?: boolean;\n\n  // inAppBrowser options\n  location?: string;\n  hidden?: string;\n  clearcache?: string;\n  clearsessioncache?: string;\n  zoom?: string;\n  hardwareback?: string;\n  mediaPlaybackRequiresUserAction?: string;\n  shouldPauseOnSuspsend?: string;\n  closebuttoncaption?: string;\n  disallowoverscroll?: string;\n  enableViewportScale?: string;\n  allowInlineMediaPlayback?: string;\n  keyboardDisplayRequiresUserAction?: string;\n  suppressesIncrementalRendering?: string;\n  presentationstyle?: string;\n  transitionstyle?: string;\n  toolbarposition?: string;\n  fullscreen?: string;\n}\n\n/**\n * @hidden\n */\nexport class ThemeableBrowserObject {\n\n  private _objectInstance: any;\n\n  constructor(url: string, target: string, styleOptions: ThemeableBrowserOptions) {\n    try {\n      this._objectInstance = cordova.ThemeableBrowser.open(url, target, styleOptions);\n    } catch (e) {\n      window.open(url);\n      console.warn('Native: ThemeableBrowser is not installed or you are running on a browser. Falling back to window.open.');\n    }\n  }\n\n  /**\n   * Displays an browser window that was opened hidden. Calling this has no effect\n   * if the browser was already visible.\n   */\n  @CordovaInstance({ sync: true })\n  show(): void { }\n\n  /**\n   * Closes the browser window.\n   */\n  @CordovaInstance({ sync: true })\n  close(): void { }\n\n  /**\n   * Reloads the current page\n   */\n  @CordovaInstance({ sync: true })\n  reload(): void { }\n\n  /**\n   * Injects JavaScript code into the browser window.\n   * @param script    Details of the script to run, specifying either a file or code key.\n   * @returns {Promise<any>}\n   */\n  @CordovaInstance()\n  executeScript(script: { file?: string, code?: string }): Promise<any> { return; }\n\n  /**\n   * Injects CSS into the browser window.\n   * @param css       Details of the script to run, specifying either a file or code key.\n   * @returns {Promise<any>}\n   */\n  @CordovaInstance()\n  insertCss(css: { file?: string, code?: string }): Promise<any> { return; }\n\n  /**\n   * A method that allows you to listen to events happening in the browser.\n   * Available events are: `ThemeableBrowserError`, `ThemeableBrowserWarning`, `critical`, `loadfail`, `unexpected`, `undefined`\n   * @param event Event name\n   * @returns {Observable<any>} Returns back an observable that will listen to the event on subscribe, and will stop listening to the event on unsubscribe.\n   */\n  @InstanceCheck({ observable: true })\n  on(event: string): Observable<any> {\n    return new Observable<any>((observer) => {\n      this._objectInstance.addEventListener(event, observer.next.bind(observer));\n      return () => this._objectInstance.removeEventListener(event, observer.next.bind(observer));\n    });\n  }\n\n}\n\n/**\n * @name Themeable Browser\n * @description\n * In-app browser that allows styling.\n *\n * @usage\n * ```typescript\n * import { ThemeableBrowser, ThemeableBrowserOptions, ThemeableBrowserObject } from '@ionic-native/themeable-browser';\n *\n * constructor(private themeableBrowser: ThemeableBrowser) { }\n *\n * ...\n *\n * // can add options from the original InAppBrowser in a JavaScript object form (not string)\n * // This options object also takes additional parameters introduced by the ThemeableBrowser plugin\n * // This example only shows the additional parameters for ThemeableBrowser\n * // Note that that `image` and `imagePressed` values refer to resources that are stored in your app\n * const options: ThemeableBrowserOptions = {\n *      statusbar: {\n *          color: '#ffffffff'\n *      },\n *      toolbar: {\n *          height: 44,\n *          color: '#f0f0f0ff'\n *      },\n *      title: {\n *          color: '#003264ff',\n *          showPageTitle: true\n *      },\n *      backButton: {\n *          image: 'back',\n *          imagePressed: 'back_pressed',\n *          align: 'left',\n *          event: 'backPressed'\n *      },\n *      forwardButton: {\n *          image: 'forward',\n *          imagePressed: 'forward_pressed',\n *          align: 'left',\n *          event: 'forwardPressed'\n *      },\n *      closeButton: {\n *          image: 'close',\n *          imagePressed: 'close_pressed',\n *          align: 'left',\n *          event: 'closePressed'\n *      },\n *      customButtons: [\n *          {\n *              image: 'share',\n *              imagePressed: 'share_pressed',\n *              align: 'right',\n *              event: 'sharePressed'\n *          }\n *      ],\n *      menu: {\n *          image: 'menu',\n *          imagePressed: 'menu_pressed',\n *          title: 'Test',\n *          cancel: 'Cancel',\n *          align: 'right',\n *          items: [\n *              {\n *                  event: 'helloPressed',\n *                  label: 'Hello World!'\n *              },\n *              {\n *                  event: 'testPressed',\n *                  label: 'Test!'\n *              }\n *          ]\n *      },\n *      backButtonCanClose: true\n * };\n *\n * const browser: ThemeableBrowserObject = this.themeableBrowser.create('https://ionic.io', '_blank', options);\n *\n * ```\n * We suggest that you refer to the plugin's repository for additional information on usage that may not be covered here.\n * @classes\n * ThemeableBrowserObject\n * @interfaces\n * ThemeableBrowserButton\n * ThemeableBrowserOptions\n */\n@Plugin({\n  pluginName: 'ThemeableBrowser',\n  plugin: 'cordova-plugin-themeablebrowser',\n  pluginRef: 'cordova.ThemeableBrowser',\n  repo: 'https://github.com/initialxy/cordova-plugin-themeablebrowser',\n  platforms: ['Amazon Fire OS', 'Android', 'Blackberry 10', 'Browser', 'FirefoxOS', 'iOS', 'Ubuntu', 'Windows', 'Windows Phone']\n})\n\nexport class ThemeableBrowser extends IonicNativePlugin {\n\n  /**\n   * Creates a browser instance\n   * @param url {string} URL to open\n   * @param target {string} Target\n   * @param styleOptions {ThemeableBrowserOptions} Themeable browser options\n   * @returns {ThemeableBrowserObject}\n   */\n  create(url: string, target: string, styleOptions: ThemeableBrowserOptions): ThemeableBrowserObject {\n    return new ThemeableBrowserObject(url, target, styleOptions);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}